// English-only translations for the application
import { enSettingsTranslations } from './settings-translations';

// Define types for languages and translations - English only
export type Language = 'en';

export type Translation = {
  [key: string]: string | Translation;
};

export type TranslationsByLanguage = {
  [key in Language]: Translation;
};

// Define translations for common components - English only
export const translations: TranslationsByLanguage = {
  en: {
    ...enSettingsTranslations,
    common: {
      save: 'Save',
      cancel: 'Cancel',
      edit: 'Edit',
      delete: 'Delete',
      create: 'Create',
      search: 'Search',
      filter: 'Filter',
      add: 'Add',
      remove: 'Remove',
      back: 'Back',
      next: 'Next',
      previous: 'Previous',
      loading: 'Loading...',
      noData: 'No data available',
      confirm: 'Confirm',
      yes: 'Yes',
      no: 'No',
    },
    estimateTerms: '1. This estimate is valid for 30 days from the issue date.\n2. A payment of 50% is required to start the work.\n3. The remaining balance will be paid upon completion of the work.\n4. Any modifications to the scope of work may result in additional costs.',
    invoicePaymentTerms: 'Payment due in 15 days',
    navigation: {
      dashboard: 'Dashboard',
      clients: 'Clients',
      projects: 'Projects',
      estimates: 'Estimates',
      invoices: 'Invoices',
      calendar: 'Calendar',
      settings: 'Settings',
      materials: 'Materials',
      measurements: 'Measurements',
      aiAssistant: 'AI Assistant',
      vendorForm: 'Vendor Form',
      logout: 'Logout',
    },
    dashboard: {
      welcomeBack: 'Welcome back',
      todayActivity: 'Here\'s what\'s happening today',
      upcomingJobs: 'Upcoming Jobs',
      pendingInvoices: 'Pending Invoices',
      pendingEstimates: 'Pending Estimates',
      thisWeek: 'This week',
      nextWeek: 'Next week',
      dueThisWeek: 'Due this week',
      overdue: 'Overdue',
      sent: 'Sent',
      draft: 'Draft',
      todaySchedule: 'Today\'s Schedule',
      viewCalendar: 'View Calendar',
      activeProjects: 'Active Projects',
      viewAllProjects: 'View All Projects',
      recentActivity: 'Recent Activity',
    },
    auth: {
      login: 'Login',
      register: 'Register',
      email: 'Email',
      password: 'Password',
      forgotPassword: 'Forgot Password',
      confirmPassword: 'Confirm Password',
      firstName: 'First Name',
      lastName: 'Last Name',
      companyName: 'Company Name',
      agreeTos: 'I agree to the terms and conditions',
      alreadyHaveAccount: 'Already have an account?',
      dontHaveAccount: 'Don\'t have an account?',
    },
    clients: {
      title: 'Clients',
      addClient: 'Add Client',
      editClient: 'Edit Client',
      deleteClient: 'Delete Client',
      clientDetails: 'Client Details',
      firstName: 'First Name',
      lastName: 'Last Name',
      email: 'Email',
      phone: 'Phone',
      address: 'Address',
      city: 'City',
      state: 'State',
      zipCode: 'Zip Code',
      notes: 'Notes',
    },
    projects: {
      title: 'Projects',
      addProject: 'Add Project',
      editProject: 'Edit Project',
      deleteProject: 'Delete Project',
      projectDetails: 'Project Details',
      projectName: 'Project Name',
      client: 'Client',
      startDate: 'Start Date',
      endDate: 'End Date',
      status: 'Status',
      description: 'Description',
      budget: 'Budget',
      statusOptions: {
        planning: 'Planning',
        inProgress: 'In Progress',
        onHold: 'On Hold',
        completed: 'Completed',
        cancelled: 'Cancelled',
      },
    },
    estimates: {
      title: 'Estimates',
      addEstimate: 'Create Estimate',
      editEstimate: 'Edit Estimate',
      deleteEstimate: 'Delete Estimate',
      estimateDetails: 'Estimate Details',
      estimateNumber: 'Estimate Number',
      client: 'Client',
      project: 'Project',
      issueDate: 'Issue Date',
      expiryDate: 'Expiry Date',
      status: 'Status',
      items: 'Items',
      subtotal: 'Subtotal',
      tax: 'Tax',
      discount: 'Discount',
      total: 'Total',
      notes: 'Notes',
      terms: 'Terms and Conditions',
      addItem: 'Add Item',
      itemDescription: 'Description',
      quantity: 'Quantity',
      unitPrice: 'Unit Price',
      amount: 'Amount',
      statusOptions: {
        draft: 'Draft',
        sent: 'Sent',
        accepted: 'Accepted',
        rejected: 'Rejected',
        expired: 'Expired',
      },
    },
    aiAssistant: {
      title: 'AI Assistant',
      askQuestion: 'Ask a question',
      suggestions: 'Suggestions',
      history: 'History',
      clearHistory: 'Clear History',
      loading: 'Thinking...',
      placeholder: 'How can I help you today?',
    },
    invoices: {
      title: 'Invoices',
      addInvoice: 'Create Invoice',
      editInvoice: 'Edit Invoice',
      deleteInvoice: 'Delete Invoice',
      invoiceDetails: 'Invoice Details',
      invoiceNumber: 'Invoice Number',
      client: 'Client',
      project: 'Project',
      issueDate: 'Issue Date',
      dueDate: 'Due Date',
      status: 'Status',
      items: 'Items',
      subtotal: 'Subtotal',
      tax: 'Tax',
      discount: 'Discount',
      total: 'Total',
      amountPaid: 'Amount Paid',
      balance: 'Balance Due',
      notes: 'Notes',
      terms: 'Terms and Conditions',
      addItem: 'Add Item',
      itemDescription: 'Description',
      quantity: 'Quantity',
      unitPrice: 'Unit Price',
      amount: 'Amount',
      statusOptions: {
        pending: 'Pending',
        paid: 'Paid',
        overdue: 'Overdue',
        cancelled: 'Cancelled',
      },
    },
    calendar: {
      title: 'Calendar',
      addEvent: 'Add Event',
      editEvent: 'Edit Event',
      deleteEvent: 'Delete Event',
      eventDetails: 'Event Details',
      eventTitle: 'Title',
      client: 'Client',
      project: 'Project',
      startDate: 'Start Date',
      endDate: 'End Date',
      allDay: 'All Day',
      description: 'Description',
      location: 'Location',
      today: 'Today',
      month: 'Month',
      week: 'Week',
      day: 'Day',
    },
    materials: {
      title: 'Materials',
      addMaterial: 'Add Material',
      editMaterial: 'Edit Material',
      deleteMaterial: 'Delete Material',
      materialDetails: 'Material Details',
      name: 'Name',
      description: 'Description',
      category: 'Category',
      unitCost: 'Unit Cost',
      unit: 'Unit',
      vendor: 'Vendor',
      inventory: 'Inventory',
      reorderLevel: 'Reorder Level',
    },
    measurements: {
      title: 'Property Measurements',
      addMeasurement: 'Add Measurement',
      editMeasurement: 'Edit Measurement',
      deleteMeasurement: 'Delete Measurement',
      measurementDetails: 'Measurement Details',
      itemTitle: 'Title',
      client: 'Client',
      project: 'Project',
      propertyType: 'Property Type',
      date: 'Date',
      notes: 'Notes',
      measurements: 'Measurements',
      total: 'Total',
      digitalMeasurement: 'Digital Measurement',
      lidarScanner: 'LiDAR Scanner',
      propertyTypes: {
        roof: 'Roof',
        fence: 'Fence',
        deck: 'Deck',
        siding: 'Siding',
        windows: 'Windows',
        gutters: 'Gutters',
      },
    },
    settings: {
      title: 'Settings',
      profile: 'Profile',
      company: 'Company',
      billing: 'Billing',
      preferences: 'Preferences',
      notifications: 'Notifications',
      security: 'Security',
      language: 'Language',
      theme: 'Theme',
      firstName: 'First Name',
      lastName: 'Last Name',
      email: 'Email',
      phone: 'Phone',
      password: 'Password',
      companyName: 'Company Name',
      taxId: 'Tax ID',
      address: 'Address',
      website: 'Website',
      logo: 'Logo',
      saveChanges: 'Save Changes',
    },
  },
};

// Helper function to get nested translation values
export function getTranslation(translations: Translation, key: string, language: Language): string {
  const keys = key.split('.');
  let current: any = translations;
  
  for (const k of keys) {
    if (current && typeof current === 'object' && k in current) {
      current = current[k];
    } else {
      // Return the key if translation is not found
      return key;
    }
  }
  
  return typeof current === 'string' ? current : key;
}
